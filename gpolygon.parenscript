(defvar current-cnv nil)
(defvar target-img (new (-image)))
(setf (@ target-img src) "/eyjafjallajokull.png")

(defvar target-cnv nil)

(defun setup ()
  (setf current-cnv (chain document
                           (get-element-by-id "current")
                           (get-context "2d")))
  (setf target-cnv (chain document
                          (get-element-by-id "target")
                          (get-context "2d"))))

(defun draw (points)
  (let ((head (chain points pop)))
    (setf (@ current-cnv fill-style) "#f00")
    (chain current-cnv (begin-path))
    (chain current-cnv (move-to (@ head 0) (@ head 1)))
    (chain points ;; a javascript map, not a CL map
           (map (lambda (point)
                  (chain current-cnv
                         (line-to (@ point 0)
                                  (@ point 1))))))
    (chain current-cnv (close-path))
    (chain current-cnv (fill))))

(setf (@ target-img onload)
      (lambda () (setup)
         (chain target-cnv (draw-image target-img 0 0))))

(defun data (id)
  (let* ((canvas (chain document (get-element-by-id id)))
         (w (@ canvas width))
         (h (@ canvas height)))
    (chain canvas (get-context "2d")
           (get-image-data 0 0 w h)
           data)))

(defun score ()
  (let ((data-current (data "current"))
        (data-target (data "target"))
        (difference 0))
    (dotimes (i (@ data-current length))
      (incf difference (abs (- (getprop data-current i)
                               (getprop data-target i)))))
    (alert (+ "difference is " difference))))
